# SPDX-FileCopyrightText: 2024 Howetuft
#
# SPDX-License-Identifier: Apache-2.0

name: LuxCore Python wheels

on: [push, pull_request]

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        #python-minor: ['8', '9', '10', '11', '12', '13']
        #python-minor: ['13']
        python-minor: ['8', '9', '10', '11', '12']
        # os: [ubuntu-latest, windows-latest, macos-13, macos-14]
        os: [ubuntu-latest, windows-latest, macos-13]
    env:
      GH_TOKEN: ${{ github.token }}
      SCCACHE_GHA_ENABLED: on
      SCCACHE_DIRECT: on
      CMAKE_MESSAGE_LOG_LEVEL: VERBOSE

    steps:

      - name: Checkout repository and submodule(s)
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 1

      - name: Configure sccache
        uses: actions/github-script@v6
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

      - name: Macos - Prepare tools
        if: startsWith(matrix.os, 'macos')
        run: |
          brew install gnu-sed

      - name: All - Clean source tree
        uses: ./.github/actions/all-clean-tree

      - name: Linux - Clean source tree
        if: startsWith(matrix.os, 'ubuntu')
        uses: ./.github/actions/linux-clean-tree

      - name: Windows - Clean source tree
        if: startsWith(matrix.os, 'windows')
        uses: ./.github/actions/windows-clean-tree

      - name: Macos - Clean source tree
        if: startsWith(matrix.os, 'macos')
        uses: ./.github/actions/macos-clean-tree

      - name: Windows - Set up build system
        if: startsWith(matrix.os, 'windows')
        uses: ./.github/actions/windows-build-system
        with:
          job-id: ${{ matrix.os }}-${{ matrix.python-minor }}

      - name: Macos - Set up build system
        if: startsWIth(matrix.os, 'macos')
        uses: ./.github/actions/macos-build-system
        with:
          job-id: ${{ matrix.os }}-${{ matrix.python-minor }}

      # Build wheel
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.21.2
        env:
          SCCACHE_GHA_ENABLED: "true"
          CIBW_BUILD_FRONTEND: build
          CIBW_BUILD_VERBOSITY: 1
          CIBW_BUILD: cp3${{ matrix.python-minor }}-*
          CIBW_SKIP: "*musllinux*"
          CIBW_ARCHS: auto64
          CIBW_ARCHS_MACOS: x86_64
          CIBW_ENVIRONMENT_PASS_LINUX: |
            SCCACHE_GHA_ENABLED
            SCCACHE_DIRECT
            ACTIONS_CACHE_URL
            ACTIONS_RUNTIME_TOKEN
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux_2_28
          CIBW_ENVIRONMENT_WINDOWS: >-
            SCCACHE_C_CUSTOM_CACHE_BUSTER='3.${{ matrix.python-minor }}'
            SCCACHE_LOG=debug
            SKBUILD_CMAKE_ARGS='--preset=conan-release;-G Ninja;--log-level=VERBOSE'
            SPDLOG_FMT_EXTERNAL=on
            BOOST_INSTALL_LAYOUT=system
          CIBW_ENVIRONMENT_MACOS: >-
            MACOSX_DEPLOYMENT_TARGET=11.0
            CMAKE_INSTALL_NAME_DIR='${{ github.workspace }}/libs'
            SCCACHE_C_CUSTOM_CACHE_BUSTER='3.${{ matrix.python-minor }}'
            SCCACHE_LOG=debug
            SKBUILD_CMAKE_ARGS='--preset=conan-release;-G Ninja;--log-level=VERBOSE'
            SPDLOG_FMT_EXTERNAL=on
            BOOST_INSTALL_LAYOUT=system
            USE_BOOST_REGEX=1
            USE_STD_REGEX=0
            USE_STD_REGEX_EXITCODE=0
          CIBW_BEFORE_ALL_LINUX: |
            source /project/scripts/before_all_linux.sh
          CIBW_BEFORE_BUILD_WINDOWS: |
            bash.exe %GITHUB_WORKSPACE%/scripts/before_build_windows.sh
          CIBW_BEFORE_BUILD_MACOS: |
            source $GITHUB_WORKSPACE/scripts/before_build_macos.sh  # TODO
          CIBW_REPAIR_WHEEL_COMMAND_LINUX: |
            auditwheel repair -w {dest_dir} {wheel} --strip
          CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: |
            bash.exe %GITHUB_WORKSPACE%/scripts/repair_wheel_windows.sh '{wheel}' '{dest_dir}' '%VCToolsRedistDir%%Platform%'
          CIBW_REPAIR_WHEEL_COMMAND_MACOS: |
            cp {wheel} $GITHUB_WORKSPACE
            export DYLD_LIBRARY_PATH=${GITHUB_WORKSPACE}/libs
            delocate-wheel --require-archs {delocate_archs} -w {dest_dir} -v {wheel}
        with:
            package-dir: .
            output-dir: wheelhouse
            config-file: "{package}/pyproject.toml"

      #- name: Setup tmate session
        #uses: mxschmitt/action-tmate@v3

      # Upload cache log (debug)
      - uses: actions/upload-artifact@v4
        if: ${{ failure() }}
        with:
          name: sccache-${{ matrix.os }}-${{ strategy.job-index }}
          path: ${{ github.workspace }}/sccache.log

      #- name: Setup tmate session
        #if: ${{ failure() }}
        #uses: mxschmitt/action-tmate@v3

      # Upload artifacts
      - uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.os }}-${{ strategy.job-index }}
          path: ./wheelhouse/*.whl
