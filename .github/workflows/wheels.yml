# SPDX-FileCopyrightText: 2024 Howetuft
#
# SPDX-License-Identifier: Apache-2.0

name: LuxCore Python wheels

on:
  pull_request:
  push:
    branches:
      - work
      - cache
  workflow_dispatch:
  release:
    types:
      - published

jobs:
  build_wheels:
    name: Build wheel ${{ matrix.os }}-3.${{ matrix.python-minor }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-minor: [8, 9, 10, 11, 12, 13]
        os: [ubuntu-latest, windows-latest, macos-13, macos-14]
    env:
      GH_TOKEN: ${{ github.token }}
      PYTHON_MINOR: ${{ matrix.python-minor }}

    steps:

      - name: Checkout repository and submodule(s)
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 1

      - name: Find workspace
        shell: bash
        run: |
          case ${{ runner.os }} in
            Linux) _workspace="/project";;
            Windows) _workspace=$(cygpath -u $GITHUB_WORKSPACE);;
            macOS) _workspace="$GITHUB_WORKSPACE";;
            *) echo "Unhandled os ${{ runner.os }}";exit 64;;
          esac
          echo "WORKSPACE=${_workspace}" >> "$GITHUB_ENV"

      - name: Configure sccache
        uses: actions/github-script@v7
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');
            core.exportVariable('SCCACHE_GHA_ENABLED', 'on');
            core.exportVariable('CMAKE_CXX_COMPILER_LAUNCHER', 'sccache');
            core.exportVariable('CMAKE_C_COMPILER_LAUNCHER', 'sccache');

      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.6

      - name: Get cmake
        if: runner.os == 'macOS' || runner.os == 'Windows'
        uses: lukka/get-cmake@latest

      - name: Prepare msvc
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1

      - name: Configure clang
        if: runner.os == 'macOS'
        uses: actions/github-script@v7
        with:
          script: |
            core.exportVariable('CXX', 'clang++');
            core.exportVariable('CC', 'clang');

      - name: Patch source tree
        shell: bash
        run: source $GITHUB_WORKSPACE/scripts/patch_source_tree.sh

      - name: Retrieve cached dependencies
        id: retrieve-cache-deps
        uses: actions/cache/restore@v4
        with:
          path: conan_cache
          key: deps-${{ matrix.os }}-${{ matrix.python-minor}}-
          restore-keys: deps-${{ matrix.os }}-${{ matrix.python-minor}}-

      # Build wheel
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.21.3
        env:
          CIBW_BUILD_FRONTEND: build
          CIBW_BUILD_VERBOSITY: 1
          CIBW_BUILD: cp3${{ matrix.python-minor }}-*
          CIBW_SKIP: "*musllinux*"
          CIBW_ARCHS: auto64
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux_2_28
          CIBW_ENVIRONMENT: >
            SKBUILD_CMAKE_ARGS='--preset=conan-release;-G Ninja;--log-level=VERBOSE'
            BOOST_INSTALL_LAYOUT=system
            SPDLOG_FMT_EXTERNAL=on
            MACOSX_DEPLOYMENT_TARGET=11.3
            BOOST_VERSION=1.84.0
            OCIO_VERSION=2.3.1
            TBB_VERSION=2021.12.0
          CIBW_ENVIRONMENT_PASS_LINUX: |
            ACTIONS_CACHE_URL
            ACTIONS_RUNTIME_TOKEN
            RUNNER_OS
            RUNNER_ARCH
            WORKSPACE
            CMAKE_CXX_COMPILER_LAUNCHER
            CMAKE_C_COMPILER_LAUNCHER
            CCACHE_DIRECT
            CCACHE_DEPEND
            CACHE
            PYTHON_MINOR
            SCCACHE_GHA_ENABLED
          CIBW_BEFORE_ALL_LINUX: |
            # TODO
            #if [[ ${{ env.CACHE }} ]]; then
              ## install ccache
              #source ${{ env.WORKSPACE }}/scripts/prepare_cache_linux.sh
            #fi
            # install others
            dnf install -y ninja-build bison flex wget
            wget https://github.com/mozilla/sccache/releases/download/v0.8.2/sccache-v0.8.2-x86_64-unknown-linux-musl.tar.gz -O - | tar -xz
            mv sccache-v0.8.2-x86_64-unknown-linux-musl/sccache /usr/bin
          CIBW_BEFORE_ALL_MACOS: |
            brew install bison flex
          CIBW_BEFORE_BUILD: bash ${{ env.WORKSPACE }}/scripts/install_conan.sh
          CIBW_REPAIR_WHEEL_COMMAND_LINUX: |
            LD_LIBRARY_PATH=$WORKSPACE/libs:$LD_LIBRARY_PATH
            echo "LD_LIBRARY_PATH=${LD_LIBRARY_PATH}"
            export LD_LIBRARY_PATH
            auditwheel --verbose repair -w {dest_dir} {wheel} --strip
          CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: |
            bash.exe ${{ env.WORKSPACE }}/scripts/repair_wheel_windows.sh '{wheel}' '{dest_dir}' '%VCToolsRedistDir%%Platform%'
          CIBW_REPAIR_WHEEL_COMMAND_MACOS: |
            cp {wheel} ${{ env.WORKSPACE }}
            export DYLD_LIBRARY_PATH=${{ env.WORKSPACE }}/libs
            delocate-wheel --require-archs {delocate_archs} -w {dest_dir} -v {wheel}
          CIBW_TEST_COMMAND_LINUX: pyluxcoretest
          CIBW_TEST_COMMAND_WINDOWS: pyluxcoretest
          CIBW_TEST_COMMAND_MACOS: |
            if [[ ${{ matrix.os }} == 'macos-13' ]]; then
              # Only for Intel
              pyluxcoretest
            fi
          CIBW_CONTAINER_ENGINE: >
            docker;
            create_args: --mount type=bind,source=${{ github.workspace }}/conan_cache,target=/conan_cache
        with:
            package-dir: .
            output-dir: wheelhouse
            config-file: "{package}/pyproject.toml"


      - name: Save dependency cache
        if: always()
        id: cache-deps-save
        uses: actions/cache/save@v4
        with:
          path: conan_cache
          key: deps-${{ matrix.os }}-${{ matrix.python-minor}}-${{ hashFiles('**/conan_cache') }}

      #- name: Setup tmate session
        #uses: mxschmitt/action-tmate@v3

      # Upload sccache log (debug)
      - uses: actions/upload-artifact@v4
        if: env.SCCACHE_ERROR_LOG != '' && env.CACHE
        with:
          name: sccache-${{ matrix.os }}-${{ matrix.python-minor }}
          path: ${{ env.SCCACHE_ERROR_LOG }}

      #- name: Setup tmate session (debug)
        #if: ${{ failure() }}
        #uses: mxschmitt/action-tmate@v3

      # Upload artifacts
      - uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.os }}-${{ matrix.python-minor }}
          path: ./wheelhouse/*.whl


  upload_test:
    needs: [build_wheels]
    environment:
      name: testpypi
      url: https://test.pypi.org/p/pyluxcore
    permissions:
      id-token: write
      attestations: write
      contents: read

    runs-on: ubuntu-latest
    if: ${{ github.ref_name }} == 'work'
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: cibw-*
          path: dist
          merge-multiple: true

      - uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          verbose: true
          verify-metadata: true
          skip-existing: true


  upload_prod:
    needs: [build_wheels]
    environment:
      name: pypi
      url: https://pypi.org/p/pyluxcore
    permissions:
      id-token: write
      attestations: write
      contents: read

    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: cibw-*
          path: dist
          merge-multiple: true

      - name: Generate artifact attestations
        uses: actions/attest-build-provenance@v1.4.3
        with:
          subject-path: "dist/*"

      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
