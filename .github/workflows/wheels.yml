# SPDX-FileCopyrightText: 2024 Howetuft
#
# SPDX-License-Identifier: Apache-2.0

name: Build

on: [push, pull_request]

permissions:
  id-token: write # Important for at least docker gha cache
  contents: read

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-minor: ['8', '9', '10', '11', '12']
        # os: [ubuntu-latest, windows-latest, macos-13, macos-14]
        os: [windows-latest]
    env:
      SCCACHE_GHA_ENABLED: on
      SCCACHE_DIRECT: on
      WINDOWS_DEPS: ${{ github.workspace }}\WindowsCompileDeps
      boost_version: 1.78.0
      GH_TOKEN: ${{ github.token }}

    steps:
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # Cache pip
      - uses: actions/cache@v3
        with:
          path: ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-      



      - name: Checkout repository and submodule(s)
        uses: actions/checkout@v4
        with:
          submodules: recursive

      #- name: Setup tmate session
      #  uses: mxschmitt/action-tmate@v3

      - name: Install last spdlog version
        if: ${{ runner.os }} == "Windows"
        working-directory:  ${{ runner.workspace }}
        run: |
          curl -o spdlog.zip -L https://github.com/gabime/spdlog/archive/refs/tags/v1.14.1.zip
          unzip spdlog.zip
          cd '${{ github.workspace }}\LuxCore\deps\spdlog-1.8.0'
          rmdir /S /Q include && cp '${{ github.workspace }}\spdlog\include' include 
      
      
      #- name: Install spdlog
      #  uses: johnwason/vcpkg-action@v6
      #  id: vcpkg
      #  with:
      #    pkgs: spdlog
      #    triplet: x64-windows-release
      #    token: ${{ github.token }}
      #    github-binarycache: true
    
      #- name: Setup tmate session
      #  uses: mxschmitt/action-tmate@v3

      - name: Copy spdlog to LuxCore tree
        if: ${{ runner.os }} == "Windows"
        working-directory:  ${{ github.workspace }}/LuxCore/deps/spdlog-1.8.0
        run: |
          rm -rf include && cp ${{steps.vcpkg.outputs.spdlog.directory}}/include include 
        shell: bash

      - name: Setup Python
        if: ${{ runner.os }} == "Windows"
        uses: actions/setup-python@v5
        with:
          python-version: 3.${{ matrix.python-minor }}
          cache: 'pip'  # Caching pip dependencies      
            
      - name: Setup sccache
        if: ${{ runner.os }} == "Windows"
        id: sccache
        uses: mozilla-actions/sccache-action@v0.0.5
      
        # Configure sccache
      - uses: actions/github-script@v6
        if: ${{ runner.os }} == "Windows"
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

      - name: Clean Windows dependencies (Boost)
        if: ${{ runner.os }} == "Windows"
        working-directory: ${{ env.WINDOWS_DEPS }}
        run: |
          rm -rf include/boost && rm x64/Release/lib/libboost*.lib
        shell: bash

      - name: Install numpy
        if: ${{ runner.os }} == "Windows"
        run: python -m pip install numpy<2
  
      # Build boost python and numpy (for Windows)
      - name: Create dir
        if: ${{ runner.os }} == "Windows"
        run: |
          mkdir '${{github.workspace}}\boost'

      - name: Restore Cache Boost
        uses: actions/cache@v4
        with:
          path: '${{ runner.workspace }}\boost_*.tar.gz'  # D:\a\LuxCoreWheel\boost_1_78_0.tar.gz
          key: 'boost-${{env.boost_version}}'
      
      - name: Build Boost
        id: boost
        uses: egor-tensin/build-boost@v1
        if: ${{ runner.os }} == "Windows"
        with:
          version: ${{ env.boost_version }}
          libraries: python program_options thread filesystem serialization iostreams regex system chrono serialization
          platform: x64
          configuration: Release
          static: 1
          toolset: vs2022
          directory: '${{github.workspace}}\boost\boost'
      
      - name: Save Cache Boost
        uses: actions/cache/save@v4
        with:
          path: '${{ runner.workspace }}\boost_*.tar.gz'
          key: 'boost-${{env.boost_version}}'

      - name: Show build Boost paths
        if: ${{ runner.os }} = "Windows"
        run: |
          printf 'Boost has been unpacked to: %s\n' '${{ steps.boost.outputs.root }}'
          printf 'Libraries can be found here: %s\n' '${{ steps.boost.outputs.librarydir }}'
        shell: bash
            
      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel==2.19.2

      - name: Install Ninja
        uses: seanmiddleditch/gha-setup-ninja@master
      
      - name: Setup msvc  
        uses: TheMrMilchmann/setup-msvc-dev@v3
        with:
          arch: x64


      - name: Build wheels
        run: python -m cibuildwheel --output-dir wheelhouse
        env:
          SCCACHE_GHA_ENABLED: "true"
          CIBW_BUILD_FRONTEND: build
          CIBW_BUILD_VERBOSITY: 1
          CIBW_BUILD: cp3${{ matrix.python-minor }}-*
          CIBW_SKIP: "*musllinux*"
          CIBW_ARCHS: auto64
          CIBW_ENVIRONMENT_PASS_LINUX: |
            SCCACHE_GHA_ENABLED
            SCCACHE_DIRECT
            ACTIONS_CACHE_URL
            ACTIONS_RUNTIME_TOKEN
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux_2_28
          CIBW_BEFORE_ALL_LINUX: source /project/scripts/before_all_linux.sh
          CIBW_ENVIRONMENT_WINDOWS: >-
            CMAKE_INCLUDE_PATH='${{ env.WINDOWS_DEPS }}\include'
            CMAKE_LIBRARY_PATH='${{ env.WINDOWS_DEPS }}\x64\Release\lib;${{ steps.boost.outputs.librarydir }}'
            CMAKE_PREFIX_PATH='${{ env.WINDOWS_DEPS }}'
            PYTHON_V='3.${{ matrix.python-minor }}'
            SCCACHE_C_CUSTOM_CACHE_BUSTER='3.${{ matrix.python-minor }}'
            BOOST_ROOT='${{ steps.boost.outputs.root }}'
            BOOST_LIBRARYDIR='${{ steps.boost.outputs.librarydir }}'
            CXXFLAGS='-DBOOST_NO_CXX11_SCOPED_ENUMS -DBOOST_FILESYSTEM_VERSION=3'
            CFLAGS='-DXML_STATIC'
            CMAKE_CXX_COMPILER_LAUNCHER=sccache
            CMAKE_C_COMPILER_LAUNCHER=sccache
            CMAKE_TOOLCHAIN_FILE='${{ github.workspace }}\vcpkg\scripts\buildsystems\vcpkg.cmake'
          CIBW_BEFORE_BUILD_WINDOWS: dir ${{ steps.boost.outputs.root }} && echo %SCCACHE_GHA_ENABLED% && dir D:\a\LuxCoreWheel\LuxCoreWheel

      - uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.os }}-${{ strategy.job-index }}
          path: ./wheelhouse/*.whl
