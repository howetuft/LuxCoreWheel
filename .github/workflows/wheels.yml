# SPDX-FileCopyrightText: 2024 Howetuft
#
# SPDX-License-Identifier: Apache-2.0

name: LuxCore Python wheels

on: [push, pull_request]

#permissions:
#  id-token: write # Important for at least docker gha cache
#  contents: write

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-minor: ['8', '9', '10', '11', '12']
        # os: [ubuntu-latest, windows-latest, macos-13, macos-14]
        os: [windows-latest]
    env:
      BOOST_VERSION: 1.85.0
      SPDLOG_VERSION: 1.14.1
      GH_TOKEN: ${{ github.token }}
      SCCACHE_GHA_ENABLED: on
      SCCACHE_DIRECT: on
      # Indicates the location of the vcpkg as a Git submodule of the project repository.
      # Not using "VCPKG_ROOT" because a variable with the same name is defined in the VS's
      # Developer Command Prompt environment in VS 2022 17.6, which would override this one 
      # if it had the same name.
      _VCPKG_: ${{ github.workspace }}/vcpkg
      # Tells vcpkg where binary packages are stored.
      VCPKG_DEFAULT_BINARY_CACHE: ${{ github.workspace }}/vcpkg/bincache
      # Let's use GitHub Action cache as storage for the vcpkg Binary Caching feature.
      VCPKG_BINARY_SOURCES: 'clear;x-gha,readwrite'

    steps:

      - name: Checkout repository and submodule(s)
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 1
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.${{ matrix.python-minor }}'

      - name: Windows - Prepare Python deps
        if: ${{ runner.os }} == "Windows"
        uses: ./.github/actions/windows-python-deps
        with:
          job-id: ${{ matrix.os }}-${{ matrix.python-minor }}

      - name: Windows - Clean source tree
        if: ${{ runner.os }} == "Windows"
        uses: ./.github/actions/windows-clean-tree

      - name: Windows - Build boost-python and boost-numpy
        if: ${{ runner.os }} == "Windows"
        uses: ./.github/actions/windows-boost-python
        with:
          job-id: ${{ matrix.os }}-${{ matrix.python-minor }}


      - name: Windows - Set up build system
        if: ${{ runner.os }} == "Windows"
        uses: ./.github/actions/windows-build-system

      #- name: Setup tmate session
      #  uses: mxschmitt/action-tmate@v3

      - name: Oidn overlay
        id: oidn-overlay
        env:
          oidn_version: "2.3.0"
          oidn_vcpkg: >
            {
              "name": "oidn",
              "version": "$oidn_version",
              "port-version": 1,
              "features": {},
              "dependencies": [
                {
                  "name": "vcpkg-cmake",
                  "host": true
                },
                {
                  "name": "vcpkg-cmake-config",
                  "host": true
                }
              ]
            }

          oidn_portfile: |
            message(STATUS "Running oidn portfile")
            mkdir ${{ github.workspace }}/oidn
            cd ${{ github.workspace }}/oidn
            vcpkg_download_distfile(
              download_path
              URLS https://github.com/RenderKit/oidn/releases/download/v${oidn_version}/oidn-${oidn_version}.x64.windows.zip
              FILENAME oidn-${{ matrix.python-minor }}.zip
              SKIP_SHA512 True  # TODO
            )
            vcpkg_extract_source_archive(
              oidn_path
              ARCHIVE download_path
            )
            vcpkg_cmake_configure(SOURCE_PATH "${oidn_path}")
            vcpkg_cmake_config_fixup(
              PACKAGE_NAME "oidn"
            )
            vcpkg_cmake_install()

          oidn_cmakelists: |
            project(oidn)
            message(STATUS "Running oidn CMakeLists")
            set(oidn_root "${oidn_workspace}/oidn-${oidn_version}.x64.windows")
            message("Installing oidn at ${oidn_root}")

            install(
              DIRECTORY ${oidn_root}/bin
              TYPE BIN
            )
            install(
              DIRECTORY ${oidn_root}/include
              TYPE INCLUDE
            )
            install(
              DIRECTORY ${oidn_root}/lib
              TYPE LIB
            )
        run: |
          echo "$oidn_vcpkg" > vcpkg.json
          echo "$oidn_portfile" > portfile.cmake
          echo "$oidn_cmakelists" > CMakeLists.txt
        shell: bash

      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel==2.19.2


      # Build wheel
      - name: Build wheels
        run: python -m cibuildwheel --output-dir wheelhouse
        env:
          SCCACHE_GHA_ENABLED: "true"
          CIBW_BUILD_FRONTEND: build
          CIBW_BUILD_VERBOSITY: 1
          CIBW_BUILD: cp3${{ matrix.python-minor }}-*
          CIBW_SKIP: "*musllinux*"
          #CIBW_ARCHS: auto64
          CIBW_ENVIRONMENT_PASS_LINUX: |
            SCCACHE_GHA_ENABLED
            SCCACHE_DIRECT
            ACTIONS_CACHE_URL
            ACTIONS_RUNTIME_TOKEN
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux_2_28
          CIBW_BEFORE_ALL_LINUX: source /project/scripts/before_all_linux.sh
          CIBW_ENVIRONMENT_WINDOWS: >-
            CMAKE_INCLUDE_PATH='${{ env.WINDOWS_DEPS }}\include'
            CMAKE_LIBRARY_PATH='${{ env.WINDOWS_DEPS }}\x64\Release\lib;${{ steps.boost.outputs.librarydir }}'
            CMAKE_PREFIX_PATH='${{ env.WINDOWS_DEPS }}'
            CMAKE_BUILD_TYPE='Release'
            CMAKE_BUILD_PARALLEL_LEVEL='4'
            BOOST_ROOT='${{ steps.boost.outputs.root }}'
            BOOST_LIBRARYDIR='${{ steps.boost.outputs.librarydir }}'
            CXXFLAGS='-DBOOST_NO_CXX11_SCOPED_ENUMS -DBOOST_FILESYSTEM_VERSION=3'
            CFLAGS='-DXML_STATIC'
            CMAKE_CXX_COMPILER_LAUNCHER=sccache
            CMAKE_C_COMPILER_LAUNCHER=sccache
            SCCACHE_C_CUSTOM_CACHE_BUSTER='3.${{ matrix.python-minor }}'
            SCCACHE_LOG='debug'
            SCCACHE_ERROR_LOG='${{ github.workspace }}\sccache.log'
            SCCACHE_CONF='${{ github.workspace }}\sccache_config'
            SCCACHE_DIRECT='true'
            SKBUILD_CMAKE_ARGS='--preset=windows;-G Ninja'
            PYTHON_V=''
          CIBW_BEFORE_BUILD_WINDOWS: dir ${{ steps.boost.outputs.root }} && echo %SCCACHE_GHA_ENABLED% && dir D:\a\LuxCoreWheel\LuxCoreWheel

      # Upload sccache log (debug)
      #- uses: actions/upload-artifact@v4
      #  if: always()
      #  with:
      #    name: sccache_${{ matrix.python-minor }}
      #    path: '${{ github.workspace }}\sccache.log'
      - name: boost python log 
        run: |
          cat D:\a\LuxCoreWheel\LuxCoreWheel\vcpkg\buildtrees\boost-python\config-x64-windows-release-out.log
          cat D:\a\LuxCoreWheel\LuxCoreWheel\vcpkg\buildtrees\boost-python\install-x64-windows-release-rel-out.log
          cat D:\a\LuxCoreWheel\LuxCoreWheel\vcpkg\buildtrees\boost-python\install-x64-windows-release-rel-err.log
        shell: cmd
        if: always()

      - uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.os }}-${{ strategy.job-index }}
          path: ./wheelhouse/*.whl
