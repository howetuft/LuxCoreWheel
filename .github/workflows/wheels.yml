# SPDX-FileCopyrightText: 2024 Howetuft
#
# SPDX-License-Identifier: Apache-2.0

name: Build

on: [push, pull_request]

permissions:
  id-token: write # Important for at least docker gha cache
  contents: read

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-minor: ['8', '9', '10', '11', '12']
        # os: [ubuntu-latest, windows-latest, macos-13, macos-14]
        os: [windows-latest]
    env:
      SCCACHE_GHA_ENABLED: on
      SCCACHE_DIRECT: on
      WINDOWS_DEPS: ${{ github.workspace }}\WindowsCompileDeps
      boost_version: 1.85.0
      GH_TOKEN: ${{ github.token }}
      # Indicates the location of the vcpkg as a Git submodule of the project repository.
      # Not using "VCPKG_ROOT" because a variable with the same name is defined in the VS's
      # Developer Command Prompt environment in VS 2022 17.6, which would override this one 
      # if it had the same name.
      _VCPKG_: ${{ github.workspace }}/vcpkg
      # Tells vcpkg where binary packages are stored.
      VCPKG_DEFAULT_BINARY_CACHE: ${{ github.workspace }}/vcpkg/bincache
      # Let's use GitHub Action cache as storage for the vcpkg Binary Caching feature.
      VCPKG_BINARY_SOURCES: 'clear;x-gha,readwrite'

    steps:

      - name: Checkout repository and submodule(s)
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 1
      
      - name: Export cache information
        uses: actions/github-script@v6
        if: ${{ runner.os }} == "Windows"
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');



      - name: Setup Python
        if: ${{ runner.os }} == "Windows"
        uses: actions/setup-python@v5
        id: setup-python
        with:
          python-version: 3.${{ matrix.python-minor }}
          cache: 'pip'
      - run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      # Cache pip
      - name: Retrieve Python deps
        uses: actions/cache@v4
        id: cache_pip
        with:
          path: ~/AppData
          key: ${{ runner.os }}-pip-${{matrix.python-minor}}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-minor }}-   
          save-always: 1
            



#      - name: Setup tmate session
#        uses: mxschmitt/action-tmate@v3

      - name: Install last spdlog version
        if: ${{ runner.os }} == "Windows"
        working-directory:  ${{ github.workspace }}
        env:
          VERSION: 1.14.1
        run: |
          curl -o spdlog.zip -L https://github.com/gabime/spdlog/archive/refs/tags/v${{env.VERSION}}.zip
          unzip spdlog.zip
          dir
          cd '${{ github.workspace }}\LuxCore\deps\spdlog-1.8.0'
          Remove-Item -Recurse -Force include
          Copy-Item -Path '${{ github.workspace }}\spdlog-${{env.VERSION}}\include' -Destination 'include' -Recurse
      
      - name: Remove project FindOpenEXR.cmake
        if: ${{ runner.os }} == "Windows"
        working-directory:  ${{ github.workspace }}
        env:
          VERSION: 1.14.1
        run: |
          cd '${{ github.workspace }}\LuxCore\cmake\Packages'
          Remove-Item -Recurse -Force FindOpenEXR.cmake

      #- name: Setup tmate session
      #  uses: mxschmitt/action-tmate@v3

      - name: Setup sccache
        if: ${{ runner.os }} == "Windows"
        id: sccache
        uses: mozilla-actions/sccache-action@v0.0.5
      
      - name: Install numpy
        if: ${{ runner.os }} == "Windows"
        run: python -m pip install numpy<2
  
      # Build boost python and numpy (for Windows)
      - name: Create dir
        if: ${{ runner.os }} == "Windows"
        run: |
          mkdir '${{github.workspace}}\boost'

      - name: Restore Cache Boost
        uses: actions/cache@v4
        with:
          path: '${{ runner.workspace }}\boost_*.tar.gz'  # D:\a\LuxCoreWheel\boost_1_78_0.tar.gz
          key: 'boost-${{env.boost_version}}'
      
      # - name: Build Boost
      #   id: boost
      #   uses: egor-tensin/build-boost@v1
      #   if: ${{ runner.os }} == "Windows"
      #   env:
      #     CMAKE_CXX_COMPILER_LAUNCHER: sccache
      #     CMAKE_C_COMPILER_LAUNCHER: sccache
      #   with:
      #     version: ${{ env.boost_version }}
      #     libraries: python program_options thread filesystem serialization iostreams regex system chrono
      #     platform: x64
      #     configuration: Release
      #     static: 1
      #     toolset: vs2022
      #     directory: '${{github.workspace}}\boost\boost'
      
      - name: Build Boost
        id: boost
        uses: egor-tensin/build-boost@v1
        if: ${{ runner.os }} == "Windows"
        env:
          CMAKE_CXX_COMPILER_LAUNCHER: sccache
          CMAKE_C_COMPILER_LAUNCHER: sccache
        with:
          version: ${{ env.boost_version }}
          libraries: python
          platform: x64
          configuration: Release
          static: 1
          toolset: vs2022
          directory: '${{github.workspace}}\boost\boost'

      - name: Boost overlay
        working-directory: '${{github.workspace}}\boost\boost\stage'
        env:
          boost_vcpkg: |
            {
              "name": "boost-python",
              "version": "1.85.0",
              "port-version": 1,
              "features": {},
              "dependencies": [
                {
                  "name": "vcpkg-cmake",
                  "host": true
                },
                {
                  "name": "vcpkg-cmake-config",
                  "host": true
                }
              ]
            }
          boost_portfile: |
            message(STATUS "boost-python portfile")
            set(VCPKG_POLICY_EMPTY_INCLUDE_FOLDER enabled)
            set(VCPKG_POLICY_SKIP_COPYRIGHT_CHECK enabled)
            vcpkg_cmake_configure()
            vcpkg_cmake_config_fixup(PACKAGE_NAME "boost-python")
            vcpkg_cmake_install()
          boost_cmakelists: |
            message(STATUS "boost-python CMakeLists")
            project(boost-python)
            add_library(boostpython STATIC IMPORTED)
            set_target_properties(boostpython PROPERTIES
              IMPORTED_LOCATION "x64/Release/lib/libboost_python3${{ matrix.python-minor }}.lib"
            )
            install(TARGETS boostpython
              RUNTIME DESTINATION bin
              ARCHIVE DESTINATION lib
              LIBRARY DESTINATION lib
            )
            install(
              FILES "x64/Release/lib/libboost_python3${{ matrix.python-minor }}.lib"
              DESTINATION ${CMAKE_INSTALL_LIBDIR}
            )
        run: |
          echo $boost_vcpkg > vcpkg.json
          echo $boost_portfile > portfile.cmake
          echo $boost_cmakelists > CMakeLists.txt
          ls x64/Release/lib
          # mkdir -p installed/x64-windows-release
          # cp stage/include installed/x64-windows-release
          # cp -r stage/x64/Release/lib installed/x64-windows-release
        shell: bash

      - name: Save Cache Boost
        if: ${{ runner.os }} = "Windows"
        uses: actions/cache/save@v4
        with:
          path: '${{ runner.workspace }}\boost_*.tar.gz'
          key: 'boost-${{env.boost_version}}'

      - name: Show build Boost paths
        if: ${{ runner.os }} = "Windows"
        run: |
          printf 'Boost has been unpacked to: %s\n' '${{ steps.boost.outputs.root }}'
          printf 'Libraries can be found here: %s\n' '${{ steps.boost.outputs.librarydir }}'
        shell: bash
            
      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel==2.19.2

      - name: Install Ninja
        if: ${{ runner.os }} = "Windows"
        uses: seanmiddleditch/gha-setup-ninja@master
      
      #- name: Setup msvc
      #  if: ${{ runner.os }} = "Windows"
      #  uses: TheMrMilchmann/setup-msvc-dev@v3
      #  with:
      #    arch: x64

      # vcpkg stuff
      - name: "Create directory '${{ env.VCPKG_DEFAULT_BINARY_CACHE }}'"
        run: mkdir -p $VCPKG_DEFAULT_BINARY_CACHE
        shell: bash

      # Setup the build machine with the most recent versions of CMake and Ninja. Both are cached if not already: on subsequent runs both will be quickly restored from GitHub cache service.
      # https://github.com/lukka/run-vcpkg
      - uses: lukka/get-cmake@latest

      # Copy CMakePresets to project
      - name: "Install CMakePresets.json and vcpkg.json"
        working-directory: '${{ github.workspace }}'
        run: |
          cp vcpkg.json LuxCore
          cp CMakePresets.json LuxCore
        shell: bash

      # Restore vcpkg from the GitHub Action cache service. Note that packages are restored by vcpkg's binary caching
      # when it is being run afterwards by CMake.
      - name: Restore vcpkg
        uses: actions/cache@v4
        with:
          # The first path is the location of vcpkg: it contains the vcpkg executable and data files, as long as the
          # built package archives (aka binary cache) which are located by VCPKG_DEFAULT_BINARY_CACHE env var.
          # The other paths starting with '!' are exclusions: they contain termporary files generated during the build of the installed packages.
          path: |
            ${{ env._VCPKG_ }}
            !${{ env._VCPKG_ }}/buildtrees
            !${{ env._VCPKG_ }}/packages
            !${{ env._VCPKG_ }}/downloads
            !${{ env._VCPKG_ }}/installed
          # The key is composed in a way that it gets properly invalidated whenever a different version of vcpkg is being used.
          key: |
            ${{ hashFiles( '.git/modules/vcpkg/HEAD' )}}

      # On Windows runners, let's ensure to have the Developer Command Prompt environment setup correctly.
      # As used here the Developer Command Prompt created is targeting x64 and using the default the Windows SDK.
      - uses: ilammy/msvc-dev-cmd@v1


      # Build wheel
      - name: Build wheels
        run: python -m cibuildwheel --output-dir wheelhouse
        env:
          SCCACHE_GHA_ENABLED: "true"
          CIBW_BUILD_FRONTEND: build
          CIBW_BUILD_VERBOSITY: 1
          CIBW_BUILD: cp3${{ matrix.python-minor }}-*
          CIBW_SKIP: "*musllinux*"
          #CIBW_ARCHS: auto64
          CIBW_ENVIRONMENT_PASS_LINUX: |
            SCCACHE_GHA_ENABLED
            SCCACHE_DIRECT
            ACTIONS_CACHE_URL
            ACTIONS_RUNTIME_TOKEN
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux_2_28
          CIBW_BEFORE_ALL_LINUX: source /project/scripts/before_all_linux.sh
          CIBW_ENVIRONMENT_WINDOWS: >-
            CMAKE_INCLUDE_PATH='${{ env.WINDOWS_DEPS }}\include'
            CMAKE_LIBRARY_PATH='${{ env.WINDOWS_DEPS }}\x64\Release\lib;${{ steps.boost.outputs.librarydir }}'
            CMAKE_PREFIX_PATH='${{ env.WINDOWS_DEPS }}'
            CMAKE_BUILD_TYPE='Release'
            CMAKE_BUILD_PARALLEL_LEVEL='4'
            PYTHON_V='3.${{ matrix.python-minor }}'
            BOOST_ROOT='${{ steps.boost.outputs.root }}'
            BOOST_LIBRARYDIR='${{ steps.boost.outputs.librarydir }}'
            CXXFLAGS='-DBOOST_NO_CXX11_SCOPED_ENUMS -DBOOST_FILESYSTEM_VERSION=3'
            CFLAGS='-DXML_STATIC'
            CMAKE_CXX_COMPILER_LAUNCHER=sccache
            CMAKE_C_COMPILER_LAUNCHER=sccache
            SCCACHE_C_CUSTOM_CACHE_BUSTER='3.${{ matrix.python-minor }}'
            SCCACHE_LOG='debug'
            SCCACHE_ERROR_LOG='${{ github.workspace }}\sccache.log'
            SCCACHE_CONF='${{ github.workspace }}\sccache_config'
            SCCACHE_DIRECT='true'
            SKBUILD_CMAKE_ARGS='--preset=windows;-G Ninja'
          CIBW_BEFORE_BUILD_WINDOWS: dir ${{ steps.boost.outputs.root }} && echo %SCCACHE_GHA_ENABLED% && dir D:\a\LuxCoreWheel\LuxCoreWheel

      # Upload sccache log (debug)
      #- uses: actions/upload-artifact@v4
      #  if: always()
      #  with:
      #    name: sccache_${{ matrix.python-minor }}
      #    path: '${{ github.workspace }}\sccache.log'

      - uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.os }}-${{ strategy.job-index }}
          path: ./wheelhouse/*.whl
