# SPDX-FileCopyrightText: 2024 Howetuft
#
# SPDX-License-Identifier: Apache-2.0

name: all-clean-tree
description: LuxCore Python Wheels - Clean/update source tree for all builds
runs:
  using: 'composite'
  steps:

    - name: Macos - Install sed
      shell: 'bash'
      if: startsWith(matrix.os, 'macos')
      run: |
        echo "::group::Macos - Install sed"
        brew install gnu-sed
        echo "::endgroup::"

    - name: Find sed
      shell: 'bash'
      run: |
        echo "::group::Find sed"
        if [[ $RUNNER_OS == "macOS" ]]; then
          echo "SED=gsed" >> $GITHUB_ENV
        else
          echo "SED=sed" >> $GITHUB_ENV
        fi
        echo "::endgroup::"

    - name: Remove all local Find*.cmake
      working-directory:  ${{ github.workspace }}
      run: |
        cd '${{ github.workspace }}/LuxCore/cmake/Packages'
        rm -vf Find*.cmake
      shell: bash

    - name: Remove Demos, Tests and Samples
      shell: 'bash'
      working-directory: ${{ github.workspace }}/LuxCore
      run: |
        useless_targets=(
          luxcoredemo
          luxcorescenedemo
          luxcoreimplserializationdemo
          luxcoreconsole
          luxcoreui
          pyunittests
          samples
        )
        for target in "${useless_targets[@]}"
        do
          echo "Removing ${target}"
          $SED -i "/${target}/d" CMakeLists.txt
        done

    - name: Remove duplicate embedded libraries
      working-directory:  ${{ github.workspace }}/LuxCore
      run: |
        pwd
        for lib in opencolorio yaml expat spdlog openvdb
        do
          echo "LuxCoreWheel - Removing '${lib}'"
          $SED -i "/deps\/${lib}/d" src/slg/CMakeLists.txt
          $SED -i "/add_library(${lib}/d" src/slg/CMakeLists.txt
          $SED -i "/target_compile_definitions(${lib}/d" src/slg/CMakeLists.txt
          rm -rf deps/${lib}*
        done
      shell: bash

    - name: Remove luxcore target_link_libraries
      working-directory:  ${{ github.workspace }}/LuxCore
      run: |
        echo "Removing luxcore target_link_libraries"
        $SED -i "/target_link_libraries(luxcore/d" src/luxcore/CMakeLists.txt
      shell: bash

    - name: Remove pyluxcore target_link_libraries
      working-directory:  ${{ github.workspace }}/LuxCore
      run: |
        echo "Removing pyluxcore target_link_libraries"
        $SED -i "/target_link_libraries(pyluxcore/d" src/luxcore/CMakeLists.txt
      shell: bash

    - name: Remove GTK3
      shell: 'bash'
      working-directory: ${{ github.workspace }}/LuxCore
      run: |
        $SED -i "/GTK3/d" cmake/Dependencies.cmake

    - name: Switch CMAKE_SOURCE_DIR to PROJECT_SOURCE_DIR
      shell: 'bash'
      working-directory: ${{ github.workspace }}/LuxCore
      run: |
        grep -rl "CMAKE_SOURCE_DIR" . --exclude-dir=.git | xargs $SED -i 's/CMAKE_SOURCE_DIR/PROJECT_SOURCE_DIR/g'

    - name: Set C++ to 14
      shell: bash
      working-directory: ${{ github.workspace }}/LuxCore
      run: |
        grep -rl "CMAKE_CXX_STANDARD" . --exclude-dir=.git | xargs $SED -i 's/11/14/g'


    - name: Boost > 1.79.0
      shell: bash
      working-directory: ${{ github.workspace }}/LuxCore
      run: |
        $SED -i '1s/^/#include <boost\/filesystem\/fstream.hpp> /' src/luxrays/utils/cuda.cpp
        $SED -i '1s/^/#include <boost\/filesystem\/fstream.hpp> /' src/luxrays/utils/ocl.cpp

    - name: OpenEXR Half
      shell: bash
      working-directory: ${{ github.workspace }}/LuxCore
      run: |
        grep -rl "#include *<OpenEXR/half.h>" . --exclude-dir=.git | xargs $SED -i 's/OpenEXR/Imath/g'

    - name: Add missing code for {fmt} Camera
      shell: bash
      working-directory: ${{ github.workspace }}/LuxCore
      run: |
        snippet='
        template <>
        struct fmt::formatter<luxcore::Camera::CameraType> {
            formatter() { std::cout << "formatter<luxcore::Camera::CameraType>()\n"; }

            constexpr auto parse(fmt::format_parse_context& ctx) {
                return ctx.begin();
            }

            auto format(const luxcore::Camera::CameraType& cam, fmt::format_context& ctx) const {
                return fmt::format_to(ctx.out(), "{}", int(cam));
            }
        };'
        echo "" >> src/luxcore/luxcoreimpl.cpp
        echo $snippet >> src/luxcore/luxcoreimpl.cpp

    # Specifics

    - name: Macos - Remove Platform Specifics and Configuration
      if: startsWith(matrix.os, 'macos')
      working-directory: ${{ github.workspace }}/LuxCore
      shell: bash
      run: |
        $SED -i "/INCLUDE(PlatformSpecific)/d" CMakeLists.txt
        $SED -i "/INCLUDE(Configuration)/d" CMakeLists.txt

    - name: Windows - Remove /TP compiler flag
      if: startsWith(matrix.os, 'windows')
      working-directory:  ${{ github.workspace }}\LuxCore
      run: |
          sed -i "s/\/TP//g" cmake/PlatformSpecific.cmake
      shell: bash

